package ai.infrrd.idc.receipt.fieldextractor.lineitems_heurestic.utils;

import ai.infrrd.idc.commons.extractors.entities.Coordinates;
import ai.infrrd.idc.commons.extractors.entities.VisionLineBlock;
import ai.infrrd.idc.commons.extractors.entities.VisionWordBlock;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class CoordinatesExtractor {
    private CoordinatesExtractor()
    {}

    private static final Logger LOG = org.slf4j.LoggerFactory.getLogger( CoordinatesExtractor.class );

    // Keep adding word delimiters that GV identifies
    private static final String WORD_DELIMITERS = ",|-|$|.|*|:|!|~|%|`|\"|'|?|\\|/|_|(|)|{|}|[|]|@|#|^|&|+|=";


    /**
     * Given lines extracted by us with GV coordinates of words, and the text to find, co ordinates of the text in the lines is returned.
     * 1. Perfect match with single occurrence in text of GV (including special characters)
     * 2. TODO : For more than one occurrence of value - use vicinity words to pick correct co ordinates
     * 3. TODO : For corrected words, original text must be sent
     * @param lines - google vision lines with word-level co ordinates
     * @param text - text for which co ordinates need to be obtained
     * @return co ordinate - of the text if found in the image. Else, null
     */
    public static Coordinates getCordinatesFromLine(List<VisionLineBlock> lines, String text, boolean isLineItem )
    {
        Coordinates cod = null;
        if ( StringUtils.isNotBlank( text ) ) {
            try {
                // Convert extracted text to text split according to google vision words
                text = getEquivalentGVText( text );
                for ( VisionLineBlock visionLineBlock : lines ) {
                    // If line contains extracted text
                    if ( visionLineBlock.toString().trim().toLowerCase().contains( text ) ) {
                        LOG.debug( "Found text in line {}.. Getting co ordinates..", visionLineBlock );
                        if ( isLineItem ) {
                            cod = getLineCoordinatesFromText( visionLineBlock );
                        } else {
                            cod = getCoordinateOfTextFromLine( text, visionLineBlock );
                        }
                        if ( cod != null ) {
                            break;
                        }
                    }
                }
            } catch ( Exception ex ) {
                LOG.warn( "Co ordinates not extracted for {}", text );
            }
        }
        return cod;
    }


    /**
     * This method gets co oridnates when the line containing the text is passed to it
     * @param visionLineBlock the line containing the text
     * @return co ordinate of text in line
     */
    private static Coordinates getCoordinateOfTextFromLine( String text, VisionLineBlock visionLineBlock )
    {
        Coordinates cod = null;
        // Get all words to match
        String[] wordsToMatch = text.split( " " );
        if ( wordsToMatch.length == 0 ) {
            return null;
        }
        List<VisionWordBlock> wordsInLine = visionLineBlock.getWords();
        for ( int wordIndex = 0; wordIndex < wordsInLine.size(); wordIndex++ ) {
            VisionWordBlock firstWordInLine = wordsInLine.get( wordIndex );
            VisionWordBlock lastWordInLine = wordsInLine.get( wordIndex + wordsToMatch.length - 1 );
            // Adding zero in the end for double values to match
            if ( firstWordInLine.getDescription().equalsIgnoreCase( wordsToMatch[0] )
                    && ( lastWordInLine.getDescription().equalsIgnoreCase( wordsToMatch[wordsToMatch.length - 1] )
                    || lastWordInLine.getDescription().equalsIgnoreCase( wordsToMatch[wordsToMatch.length - 1] + "0" ) ) ) {
                cod = new Coordinates();
                cod.setStartX( firstWordInLine.getHorizontalStartingPoint() );
                cod.setEndY( firstWordInLine.getVerticalEndingPoint() );
                cod.setStartY( firstWordInLine.getVerticalStartingPoint() );
                cod.setEndX( lastWordInLine.getHorizontalEndingPoint() );
                LOG.debug( "Values are set for the co ordinates of {} in line {}", wordsToMatch[0], visionLineBlock );
                break;
            }
        }
        return cod;
    }


    /**
     * This is a helper method that converts extracted text to text that is generated by google vision, to make it searchable
     * @param text extracted text
     * @return GV searchable text
     */
    private static String getEquivalentGVText( String text )
    {
        for ( String delimiter : WORD_DELIMITERS.split( "\\|" ) ) {
            if ( !delimiter.isEmpty() ) {
                text = text.replace( delimiter, " " + delimiter + " " ).trim();
            }
        }
        text = text.toLowerCase().replaceAll( "\\s{2,100}", " " );
        LOG.trace( "Text after formatting : {}", text );
        return text;
    }


    public static List<VisionLineBlock> removeCorrespondingVisionLineBlock( List<VisionLineBlock> originialVisionLineBlockList,
                                                                            Coordinates coordinates )
    {

        return originialVisionLineBlockList.stream().filter( visionLineBlock -> {

            List<VisionWordBlock> wordsInLine = visionLineBlock.getWords();
            boolean startX = false;
            boolean startY = false;
            boolean endX = false;
            boolean endY = false;

            for ( VisionWordBlock visionWordBlock : wordsInLine ) {
                if ( !startX && visionWordBlock.getHorizontalStartingPoint() == coordinates.getStartX() ) {
                    startX = true;
                }

                if ( !startY && visionWordBlock.getVerticalStartingPoint() == coordinates.getStartY() ) {
                    startY = true;
                }

                if ( !endX && visionWordBlock.getHorizontalEndingPoint() == coordinates.getEndX() ) {
                    endX = true;
                }

                if ( !endY && visionWordBlock.getVerticalEndingPoint() == coordinates.getEndY() ) {
                    endY = true;
                }

                if ( startX && startY && endX && endY ) {
                    return false;
                }
            }
            return true;
        } ).collect( Collectors.toList() );
    }


    public static Coordinates getLineCoordinatesFromText( VisionLineBlock lineBlock )
    {
        Coordinates cod = new Coordinates();
        cod.setStartX( lineBlock.getStartBottomVertex().getX() );
        cod.setStartY( lineBlock.getStartTopVertex().getY() );
        cod.setEndX( lineBlock.getEndBottomVertex().getX() );
        cod.setEndY( lineBlock.getEndBottomVertex().getY() );
        return cod;
    }


    public static Coordinates getLineCoordinatesUsingAdjacentLine( Map<String, Object> lineItem,
                                                                   List<VisionLineBlock> lineBlocks, boolean forFirstLine )
    {
        Coordinates cod = null;
        boolean blockFound = false;
        if ( lineItem.get( "startX" ) == null || lineItem.get( "startY" ) == null || lineItem.get( "endX" ) == null
                || lineItem.get( "endY" ) == null ) {
            return cod;
        }
        int startX = (int) lineItem.get( "startX" );
        int startY = (int) lineItem.get( "startY" );
        int endX = (int) lineItem.get( "endX" );
        int endY = (int) lineItem.get( "endY" );
        VisionLineBlock previousBlock = null;
        for ( VisionLineBlock lineBlock : lineBlocks ) {
            if ( forFirstLine && blockFound ) {
                cod = getLineCoordinatesFromText( previousBlock );
                break;
            } else if ( blockFound ) {
                cod = getLineCoordinatesFromText( lineBlock );
                break;
            }
            if ( lineBlock.getStartBottomVertex().getX() == startX && lineBlock.getStartTopVertex().getY() == startY
                    && lineBlock.getEndBottomVertex().getX() == endX && lineBlock.getEndBottomVertex().getY() == endY ) {
                blockFound = true;
            }
            if ( !blockFound ) {
                previousBlock = lineBlock;
            }
        }
        return cod;
    }


    public static Coordinates getCoordinatesFromLineUsingVicinityWord( List<VisionLineBlock> lines, String matchedVicinity )
    {
        if( matchedVicinity==null || matchedVicinity.isEmpty() )
            return null;

        matchedVicinity = getEquivalentGVText( matchedVicinity );
        for ( VisionLineBlock visionLineBlock : lines ) {
            // If line contains extracted text
            if ( visionLineBlock.toString().trim().toLowerCase().contains( matchedVicinity )
                    || removeAllSpaces( visionLineBlock.toString() ).trim().toLowerCase().contains( matchedVicinity ) ) {
                return getLineCoordinatesFromText( visionLineBlock );
            }
        }

        //        getCordinatesFromLine( ocrCoordinates, matchedVicinity, false );
        return null;
    }


    public static Coordinates getFirstLineBlockCoordinates(List<VisionLineBlock> lines )
    {
        VisionLineBlock visionLineBlock = lines.get( 0 );
        return getLineCoordinatesFromText( visionLineBlock );
    }


    public static String removeAllSpaces( String input )
    {
        return input.replaceAll( "\\s", "" );
    }
}
